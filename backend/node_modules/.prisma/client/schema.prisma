// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Global Models

model User {
  id               Int       @id @default(autoincrement())
  email            String    @unique
  passwordHash     String    @map("password_hash")
  role             Role      @default(CASHIER)
  firstName        String    @map("first_name")
  lastName         String    @map("last_name")
  phone            String?
  twoFactorEnabled Boolean   @default(false) @map("two_factor_enabled")
  twoFactorSecret  String?   @map("two_factor_secret")
  lastLogin        DateTime? @map("last_login")
  permissions      Json?
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  employee          Employee?
  journalAudit      JournalAudit[]
  processedPayments Payment[]
  notifications     Notification[]

  // Company relations
  createdFactures          CompanyFacture[]           @relation("FactureCreatedBy")
  createdPayRuns           CompanyPayRun[]            @relation("PayRunCreatedBy")
  approvedPayRuns          CompanyPayRun[]            @relation("PayRunApprovedBy")
  processedPaymentsCompany CompanyPaiement[]          @relation("PaiementProcessedBy")
  uploadedDocuments        CompanyDocument[]          @relation("DocumentUploadedBy")
  createdModeles           CompanyModeleDocument[]    @relation("ModeleCreatedBy")
  modifiedSalaries         CompanyHistoriqueSalaire[] @relation("SalaryModifiedBy")

  @@map("users")
}

model Employee {
  id           Int            @id @default(autoincrement())
  userId       Int            @unique @map("user_id")
  entrepriseId Int            @map("entreprise_id")
  employeeId   String         @unique @map("employee_id")
  department   String?
  position     String?
  salary       Decimal?       @db.Decimal(10, 2)
  hireDate     DateTime?      @map("hire_date")
  phone        String?
  address      String?        @db.Text
  status       EmployeeStatus @default(ACTIVE)
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")

  // Relations
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  entreprise Entreprise @relation(fields: [entrepriseId], references: [id])
  payments   Payment[]

  // Company relations
  factures      CompanyFacture[]
  bulletins     CompanyBulletin[]
  documents     CompanyDocument[]
  salaryHistory CompanyHistoriqueSalaire[]

  @@index([entrepriseId])
  @@index([status])
  @@map("employees")
}

model Entreprise {
  id             Int      @id @default(autoincrement())
  nom            String
  adresse        String?  @db.Text
  telephone      String?
  email          String?
  siteWeb        String?  @map("site_web")
  logo           String?
  description    String?  @db.Text
  devise         String   @default("XOF") @map("devise")
  timezone       String   @default("Africa/Dakar")
  periodePayroll String   @default("MENSUEL") @map("periode_payroll")
  estActive      Boolean  @default(true) @map("est_active")
  parametres     Json?    @map("parametres")
  creeLe         DateTime @default(now()) @map("cree_le")
  modifieLe      DateTime @updatedAt @map("modifie_le")

  // Relations
  employees Employee[]

  // Company relations
  payRuns            CompanyPayRun[]
  templates          CompanyTemplate[]
  settings           CompanySetting[]
  modeles            CompanyModeleDocument[]
  periodesPaie       CompanyPeriodePaie[]
  configurationsPaie CompanyConfigurationPaie[]

  @@map("entreprises")
}

model JournalAudit {
  id                Int      @id @default(autoincrement())
  utilisateurId     Int?     @map("utilisateur_id")
  action            String
  nomTable          String   @map("nom_table")
  idEnregistrement  Int?     @map("id_enregistrement")
  anciennes_valeurs Json?    @map("anciennes_valeurs")
  nouvelles_valeurs Json?    @map("nouvelles_valeurs")
  creeLe            DateTime @default(now()) @map("cree_le")

  // Relations
  utilisateur User? @relation(fields: [utilisateurId], references: [id])

  @@map("journal_audit")
}

model Payment {
  id            Int           @id @default(autoincrement())
  employeeId    Int           @map("employee_id")
  amount        Decimal       @db.Decimal(10, 2)
  paymentDate   DateTime      @default(now()) @map("payment_date")
  paymentMethod PaymentMethod @default(CASH) @map("payment_method")
  reference     String?       @unique
  status        PaymentStatus @default(PENDING)
  notes         String?       @db.Text
  processedBy   Int?          @map("processed_by") // User ID du caissier
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id])
  cashier  User?    @relation(fields: [processedBy], references: [id])

  @@index([employeeId])
  @@index([paymentDate])
  @@index([status])
  @@map("payments")
}

model Notification {
  id        Int              @id @default(autoincrement())
  userId    Int              @map("user_id")
  title     String
  message   String           @db.Text
  type      NotificationType @default(INFO)
  category  String
  isRead    Boolean          @default(false) @map("is_read")
  link      String?
  metadata  Json?
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([createdAt])
  @@map("notifications")
}

// Company Models

model CompanyFacture {
  id            Int                  @id @default(autoincrement())
  employeeId    Int                  @map("employee_id")
  numeroFacture String               @unique @map("numero_facture")
  montant       Decimal              @db.Decimal(10, 2)
  description   String?              @db.Text
  statut        CompanyStatutFacture @default(EN_ATTENTE)
  dateEcheance  DateTime?            @map("date_echeance")
  datePaiement  DateTime?            @map("date_paiement")
  creePar       Int                  @map("cree_par")
  creeLe        DateTime             @default(now()) @map("cree_le")
  modifieLe     DateTime             @updatedAt @map("modifie_le")

  // Relations
  employee      Employee              @relation(fields: [employeeId], references: [id])
  creator       User                  @relation("FactureCreatedBy", fields: [creePar], references: [id])
  lignesFacture CompanyLigneFacture[]

  @@map("factures")
}

model CompanyLigneFacture {
  id           Int      @id @default(autoincrement())
  factureId    Int      @map("facture_id")
  description  String
  quantite     Int      @default(1)
  prixUnitaire Decimal  @map("prix_unitaire") @db.Decimal(10, 2)
  prixTotal    Decimal  @map("prix_total") @db.Decimal(10, 2)
  creeLe       DateTime @default(now()) @map("cree_le")

  // Relations
  facture CompanyFacture @relation(fields: [factureId], references: [id], onDelete: Cascade)

  @@map("lignes_facture")
}

model CompanyPayRun {
  id              Int                 @id @default(autoincrement())
  reference       String              @unique
  dateDebut       DateTime            @map("date_debut")
  dateFin         DateTime            @map("date_fin")
  datePaiement    DateTime            @map("date_paiement")
  statut          CompanyStatutPayRun @default(BROUILLON)
  totalBrut       Decimal             @map("total_brut") @db.Decimal(10, 2)
  totalNet        Decimal             @map("total_net") @db.Decimal(10, 2)
  totalDeductions Decimal             @map("total_deductions") @db.Decimal(10, 2)
  nombreEmployes  Int                 @map("nombre_employes")
  metadata        Json?
  entrepriseId    Int                 @map("entreprise_id")
  periodePaieId   Int                 @map("periode_paie_id")
  creePar         Int                 @map("cree_par")
  creeLe          DateTime            @default(now()) @map("cree_le")
  approuveLe      DateTime?           @map("approuve_le")
  approuvePar     Int?                @map("approuve_par")

  // Relations
  entreprise  Entreprise         @relation(fields: [entrepriseId], references: [id])
  periodePaie CompanyPeriodePaie @relation(fields: [periodePaieId], references: [id])
  creator     User               @relation("PayRunCreatedBy", fields: [creePar], references: [id])
  approver    User?              @relation("PayRunApprovedBy", fields: [approuvePar], references: [id])
  bulletins   CompanyBulletin[]

  @@index([entrepriseId, statut])
  @@index([creePar])
  @@map("pay_runs")
}

model CompanyBulletin {
  id                Int      @id @default(autoincrement())
  numeroBulletin    String   @unique @map("numero_bulletin")
  datePaiement      DateTime @map("date_paiement")
  joursTravailles   Int      @map("jours_travailles")
  heuresTravailes   Int      @map("heures_travaillees")
  salaireBrut       Decimal  @map("salaire_brut") @db.Decimal(10, 2)
  salaireBase       Decimal  @map("salaire_base") @db.Decimal(10, 2)
  montantHeuresSupp Decimal  @map("montant_heures_supp") @db.Decimal(10, 2)
  montantBonus      Decimal  @map("montant_bonus") @db.Decimal(10, 2)
  indemnites        Decimal  @db.Decimal(10, 2)
  deductions        Json
  totalDeductions   Decimal  @map("total_deductions") @db.Decimal(10, 2)
  salaireNet        Decimal  @map("salaire_net") @db.Decimal(10, 2)
  montantPaye       Decimal  @map("montant_paye") @db.Decimal(10, 2)
  resteAPayer       Decimal  @map("reste_a_payer") @db.Decimal(10, 2)
  statutPaiement    String   @map("statut_paiement")
  cheminPDF         String?  @map("chemin_pdf")
  calculs           Json?
  estVerrouille     Boolean  @default(false) @map("est_verrouille")
  payRunId          Int      @map("pay_run_id")
  employeId         Int      @map("employe_id")
  creeLe            DateTime @default(now()) @map("cree_le")
  modifieLe         DateTime @updatedAt @map("modifie_le")

  // Relations
  payRun    CompanyPayRun     @relation(fields: [payRunId], references: [id])
  employee  Employee          @relation(fields: [employeId], references: [id])
  paiements CompanyPaiement[]

  @@index([payRunId])
  @@index([employeId])
  @@index([statutPaiement])
  @@map("bulletins")
}

model CompanyPaiement {
  id                   Int      @id @default(autoincrement())
  referenceTransaction String   @unique @map("reference_transaction")
  montant              Decimal  @db.Decimal(10, 2)
  methodePaiement      String   @map("methode_paiement")
  referencePaiement    String?  @map("reference_paiement")
  datePaiement         DateTime @map("date_paiement")
  notes                String?  @db.Text
  cheminRecu           String?  @map("chemin_recu")
  statut               String
  metadata             Json?
  bulletinId           Int      @map("bulletin_id")
  traitePar            Int      @map("traite_par")
  creeLe               DateTime @default(now()) @map("cree_le")

  // Relations
  bulletin  CompanyBulletin @relation(fields: [bulletinId], references: [id])
  processor User            @relation("PaiementProcessedBy", fields: [traitePar], references: [id])

  @@map("paiements")
}

model CompanyTemplate {
  id           Int      @id @default(autoincrement())
  typeTemplate String   @map("type_template")
  nom          String
  contenu      String   @db.Text
  variables    Json
  estDefaut    Boolean  @default(false) @map("est_defaut")
  estActif     Boolean  @default(true) @map("est_actif")
  entrepriseId Int      @map("entreprise_id")
  creeLe       DateTime @default(now()) @map("cree_le")
  modifieLe    DateTime @updatedAt @map("modifie_le")

  // Relations
  entreprise Entreprise @relation(fields: [entrepriseId], references: [id])

  @@map("templates")
}

model CompanySetting {
  id           Int      @id @default(autoincrement())
  cle          String
  valeur       String   @db.Text
  description  String?  @db.Text
  typeData     String   @map("type_data")
  estEncrypte  Boolean  @default(false) @map("est_encrypte")
  entrepriseId Int      @map("entreprise_id")
  modifieLe    DateTime @updatedAt @map("modifie_le")

  // Relations
  entreprise Entreprise @relation(fields: [entrepriseId], references: [id])

  @@unique([cle, entrepriseId])
  @@map("settings")
}

model CompanyDocument {
  id            Int      @id @default(autoincrement())
  type          String
  titre         String
  description   String?  @db.Text
  cheminFichier String   @map("chemin_fichier")
  tailleFichier Int      @map("taille_fichier")
  mimeType      String   @map("mime_type")
  metadata      Json?
  tags          String   @db.Text // Stocké sous forme JSON
  employeId     Int      @map("employe_id")
  uploadePar    Int      @map("uploade_par")
  creeLe        DateTime @default(now()) @map("cree_le")
  modifieLe     DateTime @updatedAt @map("modifie_le")

  // Relations
  employee Employee @relation(fields: [employeId], references: [id])
  uploader User     @relation("DocumentUploadedBy", fields: [uploadePar], references: [id])

  @@index([employeId, type])
  @@map("documents")
}

model CompanyModeleDocument {
  id           Int      @id @default(autoincrement())
  nom          String
  description  String?  @db.Text
  type         String
  contenu      String   @db.Text
  variables    Json
  estActif     Boolean  @default(true) @map("est_actif")
  entrepriseId Int      @map("entreprise_id")
  version      Int      @default(1)
  creePar      Int      @map("cree_par")
  creeLe       DateTime @default(now()) @map("cree_le")
  modifieLe    DateTime @updatedAt @map("modifie_le")

  // Relations
  entreprise Entreprise @relation(fields: [entrepriseId], references: [id])
  creator    User       @relation("ModeleCreatedBy", fields: [creePar], references: [id])

  @@unique([entrepriseId, nom, version])
  @@index([entrepriseId, type, estActif])
  @@map("modeles_document")
}

model CompanyPeriodePaie {
  id            Int       @id @default(autoincrement())
  nom           String
  dateDebut     DateTime  @map("date_debut")
  dateFin       DateTime  @map("date_fin")
  estCloturee   Boolean   @default(false) @map("est_cloturee")
  dateReglement DateTime? @map("date_reglement")
  notes         String?   @db.Text
  metadata      Json?
  entrepriseId  Int       @map("entreprise_id")
  creeLe        DateTime  @default(now()) @map("cree_le")
  modifieLe     DateTime  @updatedAt @map("modifie_le")

  // Relations
  entreprise Entreprise      @relation(fields: [entrepriseId], references: [id])
  payRuns    CompanyPayRun[]

  @@index([entrepriseId, estCloturee])
  @@map("periodes_paie")
}

model CompanyConfigurationPaie {
  id               Int      @id @default(autoincrement())
  entrepriseId     Int      @unique @map("entreprise_id")
  jourPaie         Int      @map("jour_paie")
  periodeCalcul    String   @map("periode_calcul")
  regleArrondi     String   @map("regle_arrondi")
  deviseSecondaire String?  @map("devise_secondaire")
  tauxChange       Decimal? @map("taux_change") @db.Decimal(10, 4)
  formatNumeration Json     @map("format_numeration")
  regleValidation  Json     @map("regle_validation")
  parametresCalcul Json     @map("parametres_calcul")
  modifieLe        DateTime @updatedAt @map("modifie_le")

  // Relations
  entreprise      Entreprise              @relation(fields: [entrepriseId], references: [id])
  reglesDeduction CompanyRegleDeduction[]

  @@map("configurations_paie")
}

model CompanyHistoriqueSalaire {
  id             Int      @id @default(autoincrement())
  employeId      Int      @map("employe_id")
  ancienSalaire  Decimal  @map("ancien_salaire") @db.Decimal(10, 2)
  nouveauSalaire Decimal  @map("nouveau_salaire") @db.Decimal(10, 2)
  dateEffet      DateTime @map("date_effet")
  motif          String
  notes          String?  @db.Text
  documents      Json?
  modifiePar     Int      @map("modifie_par")
  creeLe         DateTime @default(now()) @map("cree_le")

  // Relations
  employee Employee @relation(fields: [employeId], references: [id])
  modifier User     @relation("SalaryModifiedBy", fields: [modifiePar], references: [id])

  @@index([employeId, dateEffet])
  @@map("historique_salaires")
}

model CompanyRegleDeduction {
  id                    Int      @id @default(autoincrement())
  nom                   String
  description           String?  @db.Text
  type                  String
  formule               String   @db.Text
  conditionsApplication Json
  estObligatoire        Boolean  @default(false) @map("est_obligatoire")
  ordre                 Int
  configurationId       Int      @map("configuration_id")
  estActif              Boolean  @default(true) @map("est_actif")
  creeLe                DateTime @default(now()) @map("cree_le")
  modifieLe             DateTime @updatedAt @map("modifie_le")

  // Relations
  configuration CompanyConfigurationPaie @relation(fields: [configurationId], references: [id])

  @@index([configurationId, estActif])
  @@map("regles_deduction")
}

// Enums

enum Role {
  ADMIN
  CASHIER
  SUPERADMIN
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  TERMINATED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CHECK
  MOBILE_MONEY
}

enum PaymentStatus {
  PENDING
  PROCESSED
  CANCELLED
  FAILED
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}

enum CompanyStatutFacture {
  EN_ATTENTE
  PAYEE
  ANNULEE
}

enum CompanyStatutPayRun {
  BROUILLON
  EN_COURS
  EN_ATTENTE_APPROBATION
  APPROUVE
  REJETE
  COMPLETE
  ANNULE
}

enum CompanyStatutPaiement {
  EN_ATTENTE
  TRAITE
  ECHOUE
  ANNULE
}

enum CompanyMethodePaiement {
  ESPECES
  CHEQUE
  VIREMENT
  MOBILE_MONEY
  AUTRE
}
