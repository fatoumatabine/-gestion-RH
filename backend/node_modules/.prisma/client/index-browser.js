
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  role: 'role',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  twoFactorEnabled: 'twoFactorEnabled',
  twoFactorSecret: 'twoFactorSecret',
  lastLogin: 'lastLogin',
  permissions: 'permissions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmployeeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  entrepriseId: 'entrepriseId',
  employeeId: 'employeeId',
  department: 'department',
  position: 'position',
  contractType: 'contractType',
  salary: 'salary',
  dailyRate: 'dailyRate',
  hourlyRate: 'hourlyRate',
  hireDate: 'hireDate',
  phone: 'phone',
  address: 'address',
  status: 'status',
  qrCode: 'qrCode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EntrepriseScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  adresse: 'adresse',
  telephone: 'telephone',
  email: 'email',
  siteWeb: 'siteWeb',
  logo: 'logo',
  couleurPrimaire: 'couleurPrimaire',
  couleurSecondaire: 'couleurSecondaire',
  couleurDashboard: 'couleurDashboard',
  description: 'description',
  devise: 'devise',
  timezone: 'timezone',
  periodePayroll: 'periodePayroll',
  estActive: 'estActive',
  parametres: 'parametres',
  creeLe: 'creeLe',
  modifieLe: 'modifieLe'
};

exports.Prisma.JournalAuditScalarFieldEnum = {
  id: 'id',
  utilisateurId: 'utilisateurId',
  action: 'action',
  nomTable: 'nomTable',
  idEnregistrement: 'idEnregistrement',
  anciennes_valeurs: 'anciennes_valeurs',
  nouvelles_valeurs: 'nouvelles_valeurs',
  creeLe: 'creeLe'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  amount: 'amount',
  paymentDate: 'paymentDate',
  paymentMethod: 'paymentMethod',
  reference: 'reference',
  status: 'status',
  notes: 'notes',
  processedBy: 'processedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  message: 'message',
  type: 'type',
  category: 'category',
  isRead: 'isRead',
  link: 'link',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompanyFactureScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  numeroFacture: 'numeroFacture',
  montant: 'montant',
  description: 'description',
  statut: 'statut',
  dateEcheance: 'dateEcheance',
  datePaiement: 'datePaiement',
  creePar: 'creePar',
  creeLe: 'creeLe',
  modifieLe: 'modifieLe'
};

exports.Prisma.CompanyLigneFactureScalarFieldEnum = {
  id: 'id',
  factureId: 'factureId',
  description: 'description',
  quantite: 'quantite',
  prixUnitaire: 'prixUnitaire',
  prixTotal: 'prixTotal',
  creeLe: 'creeLe'
};

exports.Prisma.CompanyPayRunScalarFieldEnum = {
  id: 'id',
  reference: 'reference',
  dateDebut: 'dateDebut',
  dateFin: 'dateFin',
  datePaiement: 'datePaiement',
  statut: 'statut',
  totalBrut: 'totalBrut',
  totalNet: 'totalNet',
  totalDeductions: 'totalDeductions',
  nombreEmployes: 'nombreEmployes',
  metadata: 'metadata',
  entrepriseId: 'entrepriseId',
  periodePaieId: 'periodePaieId',
  creePar: 'creePar',
  creeLe: 'creeLe',
  approuveLe: 'approuveLe',
  approuvePar: 'approuvePar'
};

exports.Prisma.CompanyBulletinScalarFieldEnum = {
  id: 'id',
  numeroBulletin: 'numeroBulletin',
  datePaiement: 'datePaiement',
  joursTravailles: 'joursTravailles',
  heuresTravailes: 'heuresTravailes',
  salaireBrut: 'salaireBrut',
  salaireBase: 'salaireBase',
  montantHeuresSupp: 'montantHeuresSupp',
  montantBonus: 'montantBonus',
  indemnites: 'indemnites',
  deductions: 'deductions',
  totalDeductions: 'totalDeductions',
  salaireNet: 'salaireNet',
  montantPaye: 'montantPaye',
  resteAPayer: 'resteAPayer',
  statutPaiement: 'statutPaiement',
  cheminPDF: 'cheminPDF',
  calculs: 'calculs',
  estVerrouille: 'estVerrouille',
  payRunId: 'payRunId',
  employeId: 'employeId',
  creeLe: 'creeLe',
  modifieLe: 'modifieLe'
};

exports.Prisma.CompanyPaiementScalarFieldEnum = {
  id: 'id',
  referenceTransaction: 'referenceTransaction',
  montant: 'montant',
  methodePaiement: 'methodePaiement',
  referencePaiement: 'referencePaiement',
  datePaiement: 'datePaiement',
  notes: 'notes',
  cheminRecu: 'cheminRecu',
  statut: 'statut',
  metadata: 'metadata',
  bulletinId: 'bulletinId',
  traitePar: 'traitePar',
  creeLe: 'creeLe'
};

exports.Prisma.CompanyTemplateScalarFieldEnum = {
  id: 'id',
  typeTemplate: 'typeTemplate',
  nom: 'nom',
  contenu: 'contenu',
  variables: 'variables',
  estDefaut: 'estDefaut',
  estActif: 'estActif',
  entrepriseId: 'entrepriseId',
  creeLe: 'creeLe',
  modifieLe: 'modifieLe'
};

exports.Prisma.CompanySettingScalarFieldEnum = {
  id: 'id',
  cle: 'cle',
  valeur: 'valeur',
  description: 'description',
  typeData: 'typeData',
  estEncrypte: 'estEncrypte',
  entrepriseId: 'entrepriseId',
  modifieLe: 'modifieLe'
};

exports.Prisma.CompanyDocumentScalarFieldEnum = {
  id: 'id',
  type: 'type',
  titre: 'titre',
  description: 'description',
  cheminFichier: 'cheminFichier',
  tailleFichier: 'tailleFichier',
  mimeType: 'mimeType',
  metadata: 'metadata',
  tags: 'tags',
  employeId: 'employeId',
  uploadePar: 'uploadePar',
  creeLe: 'creeLe',
  modifieLe: 'modifieLe'
};

exports.Prisma.CompanyModeleDocumentScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  description: 'description',
  type: 'type',
  contenu: 'contenu',
  variables: 'variables',
  estActif: 'estActif',
  entrepriseId: 'entrepriseId',
  version: 'version',
  creePar: 'creePar',
  creeLe: 'creeLe',
  modifieLe: 'modifieLe'
};

exports.Prisma.CompanyPeriodePaieScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  dateDebut: 'dateDebut',
  dateFin: 'dateFin',
  estCloturee: 'estCloturee',
  dateReglement: 'dateReglement',
  notes: 'notes',
  metadata: 'metadata',
  entrepriseId: 'entrepriseId',
  creeLe: 'creeLe',
  modifieLe: 'modifieLe'
};

exports.Prisma.CompanyConfigurationPaieScalarFieldEnum = {
  id: 'id',
  entrepriseId: 'entrepriseId',
  jourPaie: 'jourPaie',
  periodeCalcul: 'periodeCalcul',
  regleArrondi: 'regleArrondi',
  deviseSecondaire: 'deviseSecondaire',
  tauxChange: 'tauxChange',
  formatNumeration: 'formatNumeration',
  regleValidation: 'regleValidation',
  parametresCalcul: 'parametresCalcul',
  modifieLe: 'modifieLe'
};

exports.Prisma.CompanyHistoriqueSalaireScalarFieldEnum = {
  id: 'id',
  employeId: 'employeId',
  ancienSalaire: 'ancienSalaire',
  nouveauSalaire: 'nouveauSalaire',
  dateEffet: 'dateEffet',
  motif: 'motif',
  notes: 'notes',
  documents: 'documents',
  modifiePar: 'modifiePar',
  creeLe: 'creeLe'
};

exports.Prisma.CompanyRegleDeductionScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  description: 'description',
  type: 'type',
  formule: 'formule',
  conditionsApplication: 'conditionsApplication',
  estObligatoire: 'estObligatoire',
  ordre: 'ordre',
  configurationId: 'configurationId',
  estActif: 'estActif',
  creeLe: 'creeLe',
  modifieLe: 'modifieLe'
};

exports.Prisma.PointageScalarFieldEnum = {
  id: 'id',
  employeId: 'employeId',
  date: 'date',
  heureArrivee: 'heureArrivee',
  heureDepart: 'heureDepart',
  statut: 'statut',
  typePointage: 'typePointage',
  commentaire: 'commentaire',
  latitude: 'latitude',
  longitude: 'longitude',
  ipAddress: 'ipAddress',
  deviceInfo: 'deviceInfo',
  validePar: 'validePar',
  dateValidation: 'dateValidation',
  creeLe: 'creeLe',
  modifieLe: 'modifieLe'
};

exports.Prisma.ReglePointageScalarFieldEnum = {
  id: 'id',
  entrepriseId: 'entrepriseId',
  heureDebut: 'heureDebut',
  heureFin: 'heureFin',
  toleranceRetard: 'toleranceRetard',
  toleranceDepart: 'toleranceDepart',
  joursTravail: 'joursTravail',
  heuresParJour: 'heuresParJour',
  heuresSupAutorise: 'heuresSupAutorise',
  seuilHeuresSup: 'seuilHeuresSup',
  pauseDejeuner: 'pauseDejeuner',
  estFlexible: 'estFlexible',
  plageHoraireMin: 'plageHoraireMin',
  plageHoraireMax: 'plageHoraireMax',
  joursFeries: 'joursFeries',
  modifieLe: 'modifieLe'
};

exports.Prisma.AbsenceScalarFieldEnum = {
  id: 'id',
  employeId: 'employeId',
  typeAbsence: 'typeAbsence',
  dateDebut: 'dateDebut',
  dateFin: 'dateFin',
  motif: 'motif',
  statut: 'statut',
  joursOuvres: 'joursOuvres',
  heuresAbsence: 'heuresAbsence',
  commentaire: 'commentaire',
  pieceJointe: 'pieceJointe',
  approuvePar: 'approuvePar',
  dateApprobation: 'dateApprobation',
  creeLe: 'creeLe',
  modifieLe: 'modifieLe'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  email: 'email',
  passwordHash: 'passwordHash',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  twoFactorSecret: 'twoFactorSecret'
};

exports.Prisma.EmployeeOrderByRelevanceFieldEnum = {
  employeeId: 'employeeId',
  department: 'department',
  position: 'position',
  phone: 'phone',
  address: 'address',
  qrCode: 'qrCode'
};

exports.Prisma.EntrepriseOrderByRelevanceFieldEnum = {
  nom: 'nom',
  adresse: 'adresse',
  telephone: 'telephone',
  email: 'email',
  siteWeb: 'siteWeb',
  logo: 'logo',
  couleurPrimaire: 'couleurPrimaire',
  couleurSecondaire: 'couleurSecondaire',
  couleurDashboard: 'couleurDashboard',
  description: 'description',
  devise: 'devise',
  timezone: 'timezone',
  periodePayroll: 'periodePayroll'
};

exports.Prisma.JournalAuditOrderByRelevanceFieldEnum = {
  action: 'action',
  nomTable: 'nomTable'
};

exports.Prisma.PaymentOrderByRelevanceFieldEnum = {
  reference: 'reference',
  notes: 'notes'
};

exports.Prisma.NotificationOrderByRelevanceFieldEnum = {
  title: 'title',
  message: 'message',
  category: 'category',
  link: 'link'
};

exports.Prisma.CompanyFactureOrderByRelevanceFieldEnum = {
  numeroFacture: 'numeroFacture',
  description: 'description'
};

exports.Prisma.CompanyLigneFactureOrderByRelevanceFieldEnum = {
  description: 'description'
};

exports.Prisma.CompanyPayRunOrderByRelevanceFieldEnum = {
  reference: 'reference'
};

exports.Prisma.CompanyBulletinOrderByRelevanceFieldEnum = {
  numeroBulletin: 'numeroBulletin',
  statutPaiement: 'statutPaiement',
  cheminPDF: 'cheminPDF'
};

exports.Prisma.CompanyPaiementOrderByRelevanceFieldEnum = {
  referenceTransaction: 'referenceTransaction',
  methodePaiement: 'methodePaiement',
  referencePaiement: 'referencePaiement',
  notes: 'notes',
  cheminRecu: 'cheminRecu',
  statut: 'statut'
};

exports.Prisma.CompanyTemplateOrderByRelevanceFieldEnum = {
  typeTemplate: 'typeTemplate',
  nom: 'nom',
  contenu: 'contenu'
};

exports.Prisma.CompanySettingOrderByRelevanceFieldEnum = {
  cle: 'cle',
  valeur: 'valeur',
  description: 'description',
  typeData: 'typeData'
};

exports.Prisma.CompanyDocumentOrderByRelevanceFieldEnum = {
  type: 'type',
  titre: 'titre',
  description: 'description',
  cheminFichier: 'cheminFichier',
  mimeType: 'mimeType',
  tags: 'tags'
};

exports.Prisma.CompanyModeleDocumentOrderByRelevanceFieldEnum = {
  nom: 'nom',
  description: 'description',
  type: 'type',
  contenu: 'contenu'
};

exports.Prisma.CompanyPeriodePaieOrderByRelevanceFieldEnum = {
  nom: 'nom',
  notes: 'notes'
};

exports.Prisma.CompanyConfigurationPaieOrderByRelevanceFieldEnum = {
  periodeCalcul: 'periodeCalcul',
  regleArrondi: 'regleArrondi',
  deviseSecondaire: 'deviseSecondaire'
};

exports.Prisma.CompanyHistoriqueSalaireOrderByRelevanceFieldEnum = {
  motif: 'motif',
  notes: 'notes'
};

exports.Prisma.CompanyRegleDeductionOrderByRelevanceFieldEnum = {
  nom: 'nom',
  description: 'description',
  type: 'type',
  formule: 'formule'
};

exports.Prisma.PointageOrderByRelevanceFieldEnum = {
  commentaire: 'commentaire',
  ipAddress: 'ipAddress',
  deviceInfo: 'deviceInfo'
};

exports.Prisma.ReglePointageOrderByRelevanceFieldEnum = {
  heureDebut: 'heureDebut',
  heureFin: 'heureFin',
  plageHoraireMin: 'plageHoraireMin',
  plageHoraireMax: 'plageHoraireMax'
};

exports.Prisma.AbsenceOrderByRelevanceFieldEnum = {
  motif: 'motif',
  commentaire: 'commentaire',
  pieceJointe: 'pieceJointe'
};
exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  CASHIER: 'CASHIER',
  SUPERADMIN: 'SUPERADMIN'
};

exports.ContractType = exports.$Enums.ContractType = {
  FIXED_SALARY: 'FIXED_SALARY',
  DAILY: 'DAILY',
  HOURLY: 'HOURLY'
};

exports.EmployeeStatus = exports.$Enums.EmployeeStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  TERMINATED: 'TERMINATED'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CASH: 'CASH',
  BANK_TRANSFER: 'BANK_TRANSFER',
  CHECK: 'CHECK',
  MOBILE_MONEY: 'MOBILE_MONEY'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  PROCESSED: 'PROCESSED',
  CANCELLED: 'CANCELLED',
  FAILED: 'FAILED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  INFO: 'INFO',
  SUCCESS: 'SUCCESS',
  WARNING: 'WARNING',
  ERROR: 'ERROR'
};

exports.CompanyStatutFacture = exports.$Enums.CompanyStatutFacture = {
  EN_ATTENTE: 'EN_ATTENTE',
  PAYEE: 'PAYEE',
  ANNULEE: 'ANNULEE'
};

exports.CompanyStatutPayRun = exports.$Enums.CompanyStatutPayRun = {
  BROUILLON: 'BROUILLON',
  EN_COURS: 'EN_COURS',
  EN_ATTENTE_APPROBATION: 'EN_ATTENTE_APPROBATION',
  APPROUVE: 'APPROUVE',
  REJETE: 'REJETE',
  COMPLETE: 'COMPLETE',
  ANNULE: 'ANNULE'
};

exports.StatutPointage = exports.$Enums.StatutPointage = {
  PRESENT: 'PRESENT',
  RETARD: 'RETARD',
  DEPART_ANTICIPE: 'DEPART_ANTICIPE',
  ABSENT: 'ABSENT',
  CONGE: 'CONGE',
  MALADIE: 'MALADIE',
  AUTRE: 'AUTRE'
};

exports.TypePointage = exports.$Enums.TypePointage = {
  NORMAL: 'NORMAL',
  RETARD_JUSTIFIE: 'RETARD_JUSTIFIE',
  DEPART_ANTICIPE_JUSTIFIE: 'DEPART_ANTICIPE_JUSTIFIE',
  HEURES_SUPPLEMENTAIRES: 'HEURES_SUPPLEMENTAIRES',
  TRAVAIL_NUIT: 'TRAVAIL_NUIT',
  FERIE: 'FERIE'
};

exports.TypeAbsence = exports.$Enums.TypeAbsence = {
  CONGE_ANNUEL: 'CONGE_ANNUEL',
  CONGE_MALADIE: 'CONGE_MALADIE',
  CONGE_MATERNITE: 'CONGE_MATERNITE',
  CONGE_PATERNITE: 'CONGE_PATERNITE',
  CONGE_EXCEPTIONNEL: 'CONGE_EXCEPTIONNEL',
  ABSENCE_NON_JUSTIFIEE: 'ABSENCE_NON_JUSTIFIEE',
  ACCIDENT_TRAVAIL: 'ACCIDENT_TRAVAIL',
  FORMATION: 'FORMATION',
  AUTRE: 'AUTRE'
};

exports.StatutAbsence = exports.$Enums.StatutAbsence = {
  EN_ATTENTE: 'EN_ATTENTE',
  APPROUVEE: 'APPROUVEE',
  REJETEE: 'REJETEE',
  ANNULEE: 'ANNULEE'
};

exports.Prisma.ModelName = {
  User: 'User',
  Employee: 'Employee',
  Entreprise: 'Entreprise',
  JournalAudit: 'JournalAudit',
  Payment: 'Payment',
  Notification: 'Notification',
  CompanyFacture: 'CompanyFacture',
  CompanyLigneFacture: 'CompanyLigneFacture',
  CompanyPayRun: 'CompanyPayRun',
  CompanyBulletin: 'CompanyBulletin',
  CompanyPaiement: 'CompanyPaiement',
  CompanyTemplate: 'CompanyTemplate',
  CompanySetting: 'CompanySetting',
  CompanyDocument: 'CompanyDocument',
  CompanyModeleDocument: 'CompanyModeleDocument',
  CompanyPeriodePaie: 'CompanyPeriodePaie',
  CompanyConfigurationPaie: 'CompanyConfigurationPaie',
  CompanyHistoriqueSalaire: 'CompanyHistoriqueSalaire',
  CompanyRegleDeduction: 'CompanyRegleDeduction',
  Pointage: 'Pointage',
  ReglePointage: 'ReglePointage',
  Absence: 'Absence'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
